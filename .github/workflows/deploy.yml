name: 🚀 Deploy to Vercel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

jobs:
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        
    - name: 📂 Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.0.0
        
    - name: 🔧 Install Dependencies
      run: pnpm install --frozen-lockfile
      
    - name: 🧾 Lint Code
      run: turbo run lint

    - name: 🎆 Format Check (Prettier with 2-space)
      run: pnpm format:check || echo "Format check failed - run 'pnpm format' locally"
      
    - name: ✅ Type Check
      run: turbo run check-types
      
    - name: 🏗️ Build Project with Turbo
      run: turbo run build

    - name: 🚀 Deploy to Vercel Production
      run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: 📊 Run Lighthouse CI
      run: lhci autorun --assert --config=./lighthouserc

  # other jobs remain unchanged
  
  deploy-production:
    needs: [quality-checks]
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🔧 Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: 🏗️ Build and Deploy
      run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: 📊 Run Lighthouse CI
      run: lhci autorun --assert --upload.target=temporary-public-storage
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        VERCEL_URL: ${{ secrets.VERCEL_URL }}
      
    - name: 🔔 Notify Deployment Status
      run: echo "🎉 ivo-tech.com successfully deployed!"
      
  post-deploy:
    name: 📊 Post-Deploy Actions
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔔 Notify Deployment Status
      run: |
        echo "🎉 ivo-tech.com successfully deployed!"
        echo "📊 Build completed at $(date)"
        echo "🔗 Check live site: https://ivo-tech-3io3oirxw.vercel.app" 
        echo "Lighthouse audit report: ${{ secrets.LHCI_BUILD_URL }}"
  
    - name: 🔔 Post-Deployment Summary
      run: echo "Deployment Post Actions Completed"
  
lhci-setup:
  name: "Setup Lighthouse CI"
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
    - run: npm install -g @lhci/cli@0.7.x
    - name: Configure Lighthouse
      run: echo "LHCI_GITHUB_APP_TOKEN=$LHCI_GITHUB_APP_TOKEN" >> $GITHUB_ENV
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  
notify-deploy-status:
  name: Notify Deployment Status
  runs-on: ubuntu-latest
  needs: [deploy-production]
  steps:
    - name: 🚀 Notify
      run: echo "Deployment to ivo-tech.com completed successfully!"
      
    - name: 📊 Notify Post-Deployment Lighthouse
      run: |
        echo "Audit Report is available at: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}"
      env:
        PUBLIC_AUDIT_URL: ${{ secrets.PUBLIC_AUDIT_URL }}


  visual-regression:
    name: 📷 Visual Regression Tests
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📂 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.0.0

    - name: 🔧 Install Dependencies
      run: pnpm install --frozen-lockfile

    - name: 📘 Run Chromatic
      run: pnpm chromatic

  e2e-tests:
    name: 🧪 End-to-End Tests
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📂 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.0.0

    - name: 🔧 Install Dependencies
      run: pnpm install --frozen-lockfile

    - name: 🎭 Install Playwright Browsers
      run: pnpm exec playwright install --with-deps

    - name: 🔍 Run Playwright E2E Tests
      run: pnpm test:e2e

  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality-checks, visual-regression, e2e-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 🔧 Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: 📤 Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: 🏗️ Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: 🚀 Deploy to Vercel Preview
      run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: [quality-checks, visual-regression, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 🔧 Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: 📤 Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: 🏗️ Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: 🚀 Deploy to Vercel Production
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: 🎉 Deployment Success
      run: echo "✅ Production deployment completed successfully!"

  post-deploy:
    name: 📊 Post-Deploy Actions
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔔 Notify Deployment Status
      run: |
        echo "🎉 ivo-tech.com successfully deployed!"
        echo "📊 Build completed at $(date)"
        echo "🔗 Check live site: https://ivo-tech-3io3oirxw-trixr1907s-projects.vercel.app"
