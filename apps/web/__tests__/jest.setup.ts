import '@testing-library/jest-dom';\nimport '@testing-library/jest-dom/extend-expect';\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock IntersectionObserver\nclass MockIntersectionObserver {\n  constructor() {}\n  observe = jest.fn();\n  unobserve = jest.fn();\n  disconnect = jest.fn();\n}\n\nObject.defineProperty(window, 'IntersectionObserver', {\n  writable: true,\n  configurable: true,\n  value: MockIntersectionObserver,\n});\n\n// Mock Canvas context\nHTMLCanvasElement.prototype.getContext = jest.fn(() => ({\n  fillRect: jest.fn(),\n  clearRect: jest.fn(),\n  getImageData: jest.fn(() => ({\n    data: new Array(100),\n  })),\n  putImageData: jest.fn(),\n  createImageData: jest.fn(() => []),\n  setTransform: jest.fn(),\n  drawImage: jest.fn(),\n  save: jest.fn(),\n  restore: jest.fn(),\n  scale: jest.fn(),\n  rotate: jest.fn(),\n  translate: jest.fn(),\n  transform: jest.fn(),\n  arc: jest.fn(),\n  arcTo: jest.fn(),\n  beginPath: jest.fn(),\n  bezierCurveTo: jest.fn(),\n  clearRect: jest.fn(),\n  clip: jest.fn(),\n  closePath: jest.fn(),\n  fill: jest.fn(),\n  lineTo: jest.fn(),\n  moveTo: jest.fn(),\n  stroke: jest.fn(),\n}));\n\n// Mock ResizeObserver\nclass MockResizeObserver {\n  constructor() {}\n  observe = jest.fn();\n  unobserve = jest.fn();\n  disconnect = jest.fn();\n}\n\nObject.defineProperty(window, 'ResizeObserver', {\n  writable: true,\n  configurable: true,\n  value: MockResizeObserver,\n});\n\n// Mock WebGL context\nHTMLCanvasElement.prototype.getContext = jest.fn((contextType) => {\n  if (contextType === 'webgl' || contextType === 'webgl2') {\n    return {\n      createShader: jest.fn(),\n      createProgram: jest.fn(),\n      createBuffer: jest.fn(),\n      createTexture: jest.fn(),\n      bindBuffer: jest.fn(),\n      bindTexture: jest.fn(),\n      bufferData: jest.fn(),\n      clear: jest.fn(),\n      clearColor: jest.fn(),\n      clearDepth: jest.fn(),\n      compileShader: jest.fn(),\n      drawArrays: jest.fn(),\n      drawElements: jest.fn(),\n      enable: jest.fn(),\n      getAttribLocation: jest.fn(),\n      getUniformLocation: jest.fn(),\n      linkProgram: jest.fn(),\n      shaderSource: jest.fn(),\n      useProgram: jest.fn(),\n      viewport: jest.fn(),\n    };\n  }\n  return null;\n});\n\n// Mock requestAnimationFrame and cancelAnimationFrame\nwindow.requestAnimationFrame = jest.fn();\nwindow.cancelAnimationFrame = jest.fn();\n\n// Add custom matchers\nexpect.extend({\n  toHaveCSSTransform: (received) => {\n    const hasTransform = received.style.transform !== undefined;\n    if (hasTransform) {\n      return {\n        message: () => `expected ${received} not to have CSS transform`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to have CSS transform`,\n        pass: false,\n      };\n    }\n  },\n});\n
